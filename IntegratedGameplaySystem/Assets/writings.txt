random idee:
we maken dat alle locations naar data in de serialized is,
en dan de rest is whatever basically.
i basically want all the data in the game to be in scriptalbe objects assets
and then the names of those things can change too right so yeah.


idea: instead of using resources.load, use like a blackboard technique 
with unity serialized fields. so we basically pass a list of shit in via inspector
and then we say pipe thati nto a dictionary and then make the names correct
and then dumb that shit into a service locator called something like
IAssetService, and then we have AssetScratchpad. wherbey the key is the name and such.
and then we just need to be really fricking disciplined aobut the naming of the stuff in the game.

ok, i would like to move my project away from scriptable objects lol.

my vision, as described before:

if we want to add something new to the game we do that by making a class, just
a simple class it may not inhertiet from anything. next we define the interfaces
it has, and then the heart script ( not yet mono ?? ) then is like yo we have
our scene prefabs which dont have associated behaviour ( yet ) 
i basically ideally want the single monobehavuour to be called the gamecontext or something,
kindal ike that. 

anyway, that is called heart. 


we could have a system wherbey we have dictionary whereby the gamboect is the key
and then we have an array of behaviours.
and then we have some replacement for get componenet or something.

misschien moet ik ook gewoon de hele game maken met me shiity
ass SOAP en dan kijken waar dit ass is basically / dependancies vermijden.

ok ik zie het nu een beetje dat ik gekke patterns gebruik
om te laten zien dat ik het kan maar ik kan ook scriptable objects
voor ease of ease ofzo. kan ook uitiendelijk massive jump over maken maar we kijken er wel ff naar.
kan ook een soort blackboard ding maken met de inspector. dat je like shit get based on the name ofzo idk.

ok so consider you could amke it with scriptable boejcts and shit.
and then that would be cool but it would aslo add like 30000 other
rpboems.

consider that you could still implemnt the interfaces regardles so that the heart.cs also becomes more reusable in general.
heres my plan:
we make a static config thing for the files.
then we make a GameSetupBehaviour.

for tomorrow:
finish the service locator for input and see if it works,
then, commit back to main and make the whole ass project not HAVE to use scritpable objects
use cool interfaces make more solid, use resources.load stuffs.

project ethos:
the code yaps with eachother via scriptable object inspector references.
or via some other bullshit.
i am currently consideringmaking interactor a speerate behaviour
that has static references to the plots and such. lets try that on a different branch.

next todos:
 . add more stuff
 . make raycasting work --> #SOLID !!.

i think it would be cool to have like gameintioat type beat.
so there is basically only one gameobject in the scene which is a prefab with one thing in it.

convert to neweer unity because of the order of shit.

===

fun stuff:

make physicsautosimulate

make config with inputhandler. --> servicelocator whereby the service is files ??
also insta sens in that config

config fun bit:
parse both string of key and the thing and make my own little fun language
#hacker hacker yipiie fun life i am havign. #servicelocator. that is also one 
i havent done yet.