i think it would be useufl to make a chart to describe the pipeline of scripts in this meme.

cool object pool with cool service locator doulbe yeetus.
next upgrade: speedboost.

i would say generally in my personal projects use more
delegates to abstract things away between classes but in this project it kinda annoying.

ok the upgrades work but i wanna seperate it from the plot
and i need to helicopter view it and design an acutal code?
pattenr somewhere here ? maybe builder ??


stuff to do:

look in all de dispose methods and see if you loojk for a service there, make sure its the same
service basically.

implement upgrades ( inventory movement, insta farm etc ), grenade and sprinker first.
make plotsettigns thing, make a button for the plot.

extract the interactor to an upgrade thing.

make display more modulair with IChangible VV
make dispaly more modulir with not using utils but something else. VV
make different class for keeping trakc of scorre. VV


==

add more facotries.

scope: ivnentory selection overrides current shit = hostile design
that would make it smoother


ik vind het basically valid om alleen te focuseen op dev nu en niet outer wilds totdat dat af is.

think about the decoupling between classes and that classes basically know nothing about eachother and communicate via
indireciton aka interface or delegate ( how many safe ?? ) or events ! check that for all the main and important stuff.

you could add something that not harbestble colliders are lower down.

ok, dit hele projecti s uit elkaar aan het storten, ik denk dat ik terug moet
naar hostile design in the sense dat je gewoon items kwijt raakt als je shit verkeerd doet basically.

i think that actually makes sense because its confusing for the player either way rigth.
and then we simplify the system ten fold and make sure all the composites know nothing about eachother.
and work in isolation basically.

so we have inventory
and we have interactor
and we have moneypoint

and we have ISellableItem or something
we equip something via the evenysystem.
i want to make the text red when the player is fullll.

===

three paradim ideas: unity disaster 
   fake functional
   and whereby you have classes that make all the dependancies work via like events or something idk.


ok so now we have a responsbility that the inventory says which things the interactor can interact with.
i dont want the plant to handle, this, i do think it makes sense that the plant

OK: make the plants triggers and then make interactable notinteractable ETC.
remove ground tag.

ok: here the idea: based on what the player has selected ( including the TYPE of plant )
we want to change the layermaks that the player cna interact with. does that make sense?
or like change something about the raycast settigns.

stuff i wanna add:
hold up to X amount of items of a single plant type, not multible
cant interact with collecting plants once you have selected ?? 
interact with moeny central is gain money based on items.
cant collect plant if full and does not match type.
layers? maybe make a clever something that 

new ideas given: 
chainsaw farming,
farming bomb
cool upgrades like that.
it seems like they were pretty pleased with
the pitch and said, just make it ! so thats cool,
since then my implementation for decoupling has changed.

IN DOCUMENTATION: say WHY you didnt opt for scriptalbe object pattern ( heavy coupling is the reason )
and also describe why everything billion interfaces right

i wanna make the folder based on the system and not the pattern or whateve.

performance: store all the plabnts in the frenzy game thing
and then do array emmes.

i basicalyl want some plots of each type of plant
and then i want a button at the edge of the plot to make it watered
or somethign which gives you more money but also costs money.
isWEt increases the growth odds and then if iswet we have some cute particle above it
and then if you buy the upgrade for like 100 you make the whole plot wet,
this gives the game some replayable. consider that the game takes like 2 minutes to finish right.
stress test: R to reset the game a buncha times and it will crash if u have memory leaks.

funny idea: make like so that you have some selectable plant layer
and not selectable and make it so all the plant switch layers when the 
player selects a certain plant right so we dont have infinite layers 
then. so that the playerCANN only interact with what is possible bascially. #utils

end check: commetns and summaires, make sure all places where subscribe you ALWAYS unsub thats important i tihnk.

todos:
UI
Wallet
Wallet yapping to UI or other way around rather
Place to dumb crop
Upgrades
Timer
WASD tooltip ??
gotta seperate those itnerfaces / move them into their folders.

I need to dream up a way to handle the money and total time
basically the main question is the uI, do we get shit from the ui canvas
or do we basicaly make shit isnite of it, maybe i should make some useful thing
for spawning UI finally because it is always difficult.

i dont really know the creative solution for 
the UI yet tho but i think its gonna be peak lowkey, just see.

dont forget that you need to write documentation 
and make a uml right but finish the game first is important i think.
know you dont have infitie time, but this shit is just soooo fun #cool-coding.

i wanna do input memes config and all that jazz
and yes i have time for it because im goated.

try the idea of the img_resource.load right.

random: for the player, you can also make it that:
the player's prefab resides in the player settings right

and then do the same for plant, that might be a good idea.

make the assets find something based on type or name right.
or type or obvious refernce.

    /// Perhaps i should add more stuff to the folder this is in including interfaces but ok.
    /// maybe then it makes it sligjhtly more clear which things use this right. yeah.
    /// but thats for later now i just wanna make the plants work in general.
    /// </summary>

make all the directory of the proejct nice at the end yo.

add: txt shit config funny, seperate class
add: cool assets ?? in the sense that you drag object because that doesnt break when you change the shit right.

===

random idee:
we maken dat alle locations naar data in de serialized is,
en dan de rest is whatever basically.
i basically want all the data in the game to be in scriptalbe objects assets
and then the names of those things can change too right so yeah.
i think i wanna make the money system move via the input thing.

idea: instead of using resources.load, use like a blackboard technique 
with unity serialized fields. so we basically pass a list of shit in via inspector
and then we say pipe thati nto a dictionary and then make the names correct
and then dumb that shit into a service locator called something like
IAssetService, and then we have AssetScratchpad. wherbey the key is the name and such.
and then we just need to be really fricking disciplined aobut the naming of the stuff in the game.

ok, i would like to move my project away from scriptable objects lol.

my vision, as described before:

if we want to add something new to the game we do that by making a class, just
a simple class it may not inhertiet from anything. next we define the interfaces
it has, and then the heart script ( not yet mono ?? ) then is like yo we have
our scene prefabs which dont have associated behaviour ( yet ) 
i basically ideally want the single monobehavuour to be called the gamecontext or something,
kindal ike that. 

anyway, that is called heart. 


we could have a system wherbey we have dictionary whereby the gamboect is the key
and then we have an array of behaviours.
and then we have some replacement for get componenet or something.

misschien moet ik ook gewoon de hele game maken met me shiity
ass SOAP en dan kijken waar dit ass is basically / dependancies vermijden.

ok ik zie het nu een beetje dat ik gekke patterns gebruik
om te laten zien dat ik het kan maar ik kan ook scriptable objects
voor ease of ease ofzo. kan ook uitiendelijk massive jump over maken maar we kijken er wel ff naar.
kan ook een soort blackboard ding maken met de inspector. dat je like shit get based on the name ofzo idk.

ok so consider you could amke it with scriptable boejcts and shit.
and then that would be cool but it would aslo add like 30000 other
rpboems.

consider that you could still implemnt the interfaces regardles so that the heart.cs also becomes more reusable in general.
heres my plan:
we make a static config thing for the files.
then we make a GameSetupBehaviour.

for tomorrow:
finish the service locator for input and see if it works,
then, commit back to main and make the whole ass project not HAVE to use scritpable objects
use cool interfaces make more solid, use resources.load stuffs.

project ethos:
the code yaps with eachother via scriptable object inspector references.
or via some other bullshit.
i am currently consideringmaking interactor a speerate behaviour
that has static references to the plots and such. lets try that on a different branch.

next todos:
 . add more stuff
 . make raycasting work --> #SOLID !!.

i think it would be cool to have like gameintioat type beat.
so there is basically only one gameobject in the scene which is a prefab with one thing in it.

convert to neweer unity because of the order of shit.

===

fun stuff:

make physicsautosimulate

make config with inputhandler. --> servicelocator whereby the service is files ??
also insta sens in that config

config fun bit:
parse both string of key and the thing and make my own little fun language
#hacker hacker yipiie fun life i am havign. #servicelocator. that is also one 
i havent done yet.