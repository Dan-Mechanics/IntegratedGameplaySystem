@startuml

interface IAssetService
{
    + T GetAssetByType()
    + List<T> GetAllAssetsOfType()
}

class InspectorAssets implements IAssetService
{
    - List<Object> assets
}

class GameManager
{
    - sceneBehaviour: SceneBehaviour
    - SceneSetup sceneSetup
    - InspectorAssets inspectorAssets
}

abstract class SceneBehaviour implements ScriptableObject, IStartable, IDisposable
{
    + sceneHandler: NextSceneHandler
    + virtual void Start()
    + virtual List<object> GetSceneComponents()
    + virtual void Dispose()
}

class GameScene implements SceneBehaviour
{
    upgrades: readonly List<IUpgradeBehaviour>
    money: MoneyCentral
}

class NextSceneHandler implements IStartable, IDisposable
{
    + void Start()
    + void GoNextScene()
    + void Dispose()
}

class SceneSetup implements ScriptableObject
{
    + maxFPS: int
    + fixedUpdatesPerSecond: float
    + mouseLocked: bool
}

class MenuScene implements SceneBehaviour
{
    decorators: Object[]
}

class ScoreMenuDecorator implements ScriptableObject, IMenuDecorator
{
    + void Decorate(components: List<object>, canvas: Transform)
}

interface IMenuDecorator
{
    + void Decorate(components: List<object>, canvas: Transform)
}

SceneSetup --* GameManager
SceneBehaviour --* GameManager
InspectorAssets --* GameManager
Heart --* GameManager

@enduml